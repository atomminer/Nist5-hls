// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keccak512_64 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data0,
        data1,
        data2,
        data3,
        data4,
        data5,
        data6,
        data7,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7
);

parameter    ap_ST_fsm_state1 = 40'd1;
parameter    ap_ST_fsm_state2 = 40'd2;
parameter    ap_ST_fsm_state3 = 40'd4;
parameter    ap_ST_fsm_state4 = 40'd8;
parameter    ap_ST_fsm_state5 = 40'd16;
parameter    ap_ST_fsm_state6 = 40'd32;
parameter    ap_ST_fsm_state7 = 40'd64;
parameter    ap_ST_fsm_state8 = 40'd128;
parameter    ap_ST_fsm_state9 = 40'd256;
parameter    ap_ST_fsm_state10 = 40'd512;
parameter    ap_ST_fsm_state11 = 40'd1024;
parameter    ap_ST_fsm_state12 = 40'd2048;
parameter    ap_ST_fsm_state13 = 40'd4096;
parameter    ap_ST_fsm_state14 = 40'd8192;
parameter    ap_ST_fsm_state15 = 40'd16384;
parameter    ap_ST_fsm_state16 = 40'd32768;
parameter    ap_ST_fsm_state17 = 40'd65536;
parameter    ap_ST_fsm_state18 = 40'd131072;
parameter    ap_ST_fsm_state19 = 40'd262144;
parameter    ap_ST_fsm_state20 = 40'd524288;
parameter    ap_ST_fsm_state21 = 40'd1048576;
parameter    ap_ST_fsm_state22 = 40'd2097152;
parameter    ap_ST_fsm_state23 = 40'd4194304;
parameter    ap_ST_fsm_state24 = 40'd8388608;
parameter    ap_ST_fsm_state25 = 40'd16777216;
parameter    ap_ST_fsm_state26 = 40'd33554432;
parameter    ap_ST_fsm_state27 = 40'd67108864;
parameter    ap_ST_fsm_state28 = 40'd134217728;
parameter    ap_ST_fsm_state29 = 40'd268435456;
parameter    ap_ST_fsm_state30 = 40'd536870912;
parameter    ap_ST_fsm_state31 = 40'd1073741824;
parameter    ap_ST_fsm_state32 = 40'd2147483648;
parameter    ap_ST_fsm_state33 = 40'd4294967296;
parameter    ap_ST_fsm_state34 = 40'd8589934592;
parameter    ap_ST_fsm_state35 = 40'd17179869184;
parameter    ap_ST_fsm_state36 = 40'd34359738368;
parameter    ap_ST_fsm_state37 = 40'd68719476736;
parameter    ap_ST_fsm_state38 = 40'd137438953472;
parameter    ap_ST_fsm_state39 = 40'd274877906944;
parameter    ap_ST_fsm_state40 = 40'd549755813888;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] data0;
input  [63:0] data1;
input  [63:0] data2;
input  [63:0] data3;
input  [63:0] data4;
input  [63:0] data5;
input  [63:0] data6;
input  [63:0] data7;
output  [63:0] ap_return_0;
output  [63:0] ap_return_1;
output  [63:0] ap_return_2;
output  [63:0] ap_return_3;
output  [63:0] ap_return_4;
output  [63:0] ap_return_5;
output  [63:0] ap_return_6;
output  [63:0] ap_return_7;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [39:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] RC_address0;
reg    RC_ce0;
wire   [63:0] RC_q0;
wire   [4:0] indvarinc_fu_626_p2;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_127_fu_643_p2;
reg   [63:0] tmp_127_reg_1962;
wire    ap_CS_fsm_state3;
wire   [4:0] state_addr_1_reg_1968;
wire    ap_CS_fsm_state4;
wire   [4:0] state_addr_2_reg_1974;
wire   [63:0] tmp_128_fu_648_p2;
reg   [63:0] tmp_128_reg_1980;
wire   [4:0] state_addr_3_reg_1986;
wire    ap_CS_fsm_state5;
wire   [4:0] state_addr_4_reg_1991;
wire   [4:0] state_addr_5_reg_1997;
wire    ap_CS_fsm_state6;
wire   [4:0] state_addr_6_reg_2003;
wire   [4:0] state_addr_7_reg_2008;
wire    ap_CS_fsm_state7;
wire   [4:0] state_addr_8_reg_2014;
wire   [4:0] state_addr_9_reg_2019;
wire    ap_CS_fsm_state8;
wire   [4:0] state_addr_10_reg_2024;
wire    ap_CS_fsm_state9;
wire   [4:0] i_2_fu_659_p2;
reg   [4:0] i_2_reg_2115;
wire    ap_CS_fsm_state10;
wire   [63:0] state_q1;
reg   [63:0] state_load_reg_2120;
wire    ap_CS_fsm_state11;
wire   [63:0] state_q0;
reg   [63:0] state_load_1_reg_2126;
reg   [63:0] state_load_2_reg_2132;
wire    ap_CS_fsm_state12;
reg   [63:0] state_load_3_reg_2138;
reg   [63:0] state_load_4_reg_2144;
wire    ap_CS_fsm_state13;
reg   [63:0] state_load_5_reg_2150;
reg   [63:0] state_load_6_reg_2157;
wire    ap_CS_fsm_state14;
reg   [63:0] state_load_7_reg_2164;
reg   [63:0] state_load_8_reg_2171;
wire    ap_CS_fsm_state15;
reg   [63:0] state_load_9_reg_2178;
reg   [63:0] state_load_15_reg_2185;
wire    ap_CS_fsm_state16;
reg   [63:0] state_load_16_reg_2192;
reg   [63:0] state_load_17_reg_2199;
wire    ap_CS_fsm_state17;
reg   [63:0] state_load_18_reg_2206;
reg   [63:0] state_load_19_reg_2213;
wire    ap_CS_fsm_state18;
reg   [63:0] state_load_20_reg_2220;
reg   [63:0] state_load_21_reg_2227;
wire    ap_CS_fsm_state19;
reg   [63:0] state_load_22_reg_2234;
reg   [63:0] state_load_23_reg_2241;
wire    ap_CS_fsm_state20;
reg   [63:0] state_load_24_reg_2248;
reg   [63:0] state_load_10_reg_2255;
wire    ap_CS_fsm_state21;
reg   [63:0] state_load_11_reg_2262;
reg   [63:0] state_load_12_reg_2269;
wire    ap_CS_fsm_state22;
reg   [63:0] state_load_13_reg_2276;
wire   [63:0] tt0_10_fu_678_p2;
reg   [63:0] tt0_10_reg_2283;
wire    ap_CS_fsm_state23;
reg   [63:0] state_load_14_reg_2290;
wire   [62:0] tmp_140_fu_703_p1;
reg   [62:0] tmp_140_reg_2297;
reg   [0:0] tmp_166_reg_2302;
wire   [63:0] tt0_fu_728_p2;
reg   [63:0] tt0_reg_2307;
wire   [63:0] tt0_7_fu_747_p2;
reg   [63:0] tt0_7_reg_2313;
wire   [63:0] t0_fu_790_p2;
reg   [63:0] t0_reg_2319;
wire    ap_CS_fsm_state24;
wire   [63:0] tt0_2_fu_809_p2;
reg   [63:0] tt0_2_reg_2328;
wire   [63:0] t2_fu_821_p2;
reg   [63:0] t2_reg_2334;
wire   [63:0] t3_fu_863_p2;
reg   [63:0] t3_reg_2343;
wire   [63:0] t4_fu_906_p2;
reg   [63:0] t4_reg_2352;
wire   [63:0] t1_fu_954_p2;
reg   [63:0] t1_reg_2361;
wire    ap_CS_fsm_state25;
wire   [63:0] tmp_132_fu_960_p2;
reg   [63:0] tmp_132_reg_2370;
wire   [27:0] tmp_179_fu_1040_p1;
reg   [27:0] tmp_179_reg_2377;
reg   [35:0] tmp_162_reg_2382;
wire   [60:0] tmp_181_fu_1054_p1;
reg   [60:0] tmp_181_reg_2387;
reg   [2:0] tmp_164_reg_2392;
wire   [22:0] tmp_184_fu_1068_p1;
reg   [22:0] tmp_184_reg_2397;
reg   [40:0] tmp_167_reg_2402;
wire   [45:0] tmp_187_fu_1082_p1;
reg   [45:0] tmp_187_reg_2407;
reg   [17:0] tmp_170_reg_2412;
wire   [1:0] tmp_208_fu_1096_p1;
reg   [1:0] tmp_208_reg_2417;
reg   [61:0] tmp_188_reg_2422;
wire   [57:0] tmp_211_fu_1110_p1;
reg   [57:0] tmp_211_reg_2427;
reg   [5:0] tmp_191_reg_2432;
wire   [20:0] tmp_214_fu_1124_p1;
reg   [20:0] tmp_214_reg_2437;
reg   [42:0] tmp_194_reg_2442;
wire   [48:0] tmp_217_fu_1138_p1;
reg   [48:0] tmp_217_reg_2447;
reg   [14:0] tmp_197_reg_2452;
wire   [2:0] tmp_220_fu_1152_p1;
reg   [2:0] tmp_220_reg_2457;
reg   [60:0] tmp_200_reg_2462;
wire   [35:0] tmp_223_fu_1166_p1;
reg   [35:0] tmp_223_reg_2467;
reg   [27:0] tmp_203_reg_2472;
wire   [8:0] tmp_226_fu_1180_p1;
reg   [8:0] tmp_226_reg_2477;
reg   [54:0] tmp_206_reg_2482;
wire   [38:0] tmp_229_fu_1194_p1;
reg   [38:0] tmp_229_reg_2487;
reg   [24:0] tmp_209_reg_2492;
wire   [42:0] tmp_232_fu_1208_p1;
reg   [42:0] tmp_232_reg_2497;
reg   [20:0] tmp_212_reg_2502;
wire   [7:0] tmp_235_fu_1222_p1;
reg   [7:0] tmp_235_reg_2507;
reg   [55:0] tmp_215_reg_2512;
wire   [36:0] tmp_239_fu_1236_p1;
reg   [36:0] tmp_239_reg_2517;
reg   [26:0] tmp_218_reg_2522;
wire   [43:0] tmp_240_fu_1250_p1;
reg   [43:0] tmp_240_reg_2527;
reg   [19:0] tmp_221_reg_2532;
wire   [24:0] tmp_241_fu_1264_p1;
reg   [24:0] tmp_241_reg_2537;
reg   [38:0] tmp_224_reg_2542;
wire   [55:0] tmp_242_fu_1278_p1;
reg   [55:0] tmp_242_reg_2547;
reg   [7:0] tmp_227_reg_2552;
wire   [49:0] tmp_243_fu_1292_p1;
reg   [49:0] tmp_243_reg_2557;
reg   [13:0] tmp_230_reg_2562;
wire   [63:0] tmp_165_fu_1326_p3;
reg   [63:0] tmp_165_reg_2572;
wire    ap_CS_fsm_state26;
wire   [62:0] tmp_190_fu_1332_p1;
reg   [62:0] tmp_190_reg_2578;
reg   [0:0] tmp_193_reg_2583;
wire   [19:0] tmp_196_fu_1344_p1;
reg   [19:0] tmp_196_reg_2588;
reg   [43:0] tmp_174_reg_2593;
wire   [53:0] tmp_199_fu_1358_p1;
reg   [53:0] tmp_199_reg_2598;
reg   [9:0] tmp_177_reg_2603;
wire   [18:0] tmp_202_fu_1372_p1;
reg   [18:0] tmp_202_reg_2608;
reg   [44:0] tmp_182_reg_2613;
wire   [61:0] tmp_205_fu_1386_p1;
reg   [61:0] tmp_205_reg_2618;
reg   [1:0] tmp_185_reg_2623;
wire   [63:0] tmp_204_fu_1400_p3;
reg   [63:0] tmp_204_reg_2628;
wire   [63:0] tmp_213_fu_1406_p3;
reg   [63:0] tmp_213_reg_2634;
wire   [63:0] tmp_222_fu_1412_p3;
reg   [63:0] tmp_222_reg_2640;
wire   [63:0] tmp_231_fu_1418_p3;
reg   [63:0] tmp_231_reg_2646;
wire   [63:0] c3_fu_1429_p2;
reg   [63:0] c3_reg_2652;
wire   [63:0] c0_fu_1441_p2;
reg   [63:0] c0_reg_2658;
reg   [63:0] RC_load_reg_2664;
wire   [63:0] tmp_192_fu_1459_p3;
reg   [63:0] tmp_192_reg_2669;
wire    ap_CS_fsm_state27;
wire   [63:0] tmp_210_fu_1477_p3;
reg   [63:0] tmp_210_reg_2675;
wire   [63:0] c1_fu_1506_p2;
reg   [63:0] c1_reg_2681;
wire   [63:0] c2_fu_1516_p2;
reg   [63:0] c2_reg_2687;
wire   [63:0] c4_fu_1527_p2;
reg   [63:0] c4_reg_2693;
wire   [63:0] c1_1_fu_1543_p2;
reg   [63:0] c1_1_reg_2699;
wire   [63:0] c2_1_fu_1554_p2;
reg   [63:0] c2_1_reg_2705;
wire   [63:0] c3_1_fu_1564_p2;
reg   [63:0] c3_1_reg_2711;
wire   [63:0] c4_1_fu_1574_p2;
reg   [63:0] c4_1_reg_2716;
wire   [63:0] bnn_2_fu_1580_p2;
reg   [63:0] bnn_2_reg_2721;
wire   [63:0] c1_2_fu_1592_p2;
reg   [63:0] c1_2_reg_2727;
wire   [63:0] tmp_233_fu_1603_p2;
reg   [63:0] tmp_233_reg_2732;
wire   [63:0] c0_1_fu_1624_p2;
reg   [63:0] c0_1_reg_2738;
wire    ap_CS_fsm_state28;
wire   [63:0] c2_2_fu_1635_p2;
reg   [63:0] c2_2_reg_2743;
wire   [63:0] c3_2_fu_1646_p2;
reg   [63:0] c3_2_reg_2748;
wire   [63:0] c4_2_fu_1656_p2;
reg   [63:0] c4_2_reg_2753;
wire   [63:0] tmp_207_fu_1662_p3;
reg   [63:0] tmp_207_reg_2758;
wire    ap_CS_fsm_state29;
wire   [63:0] bnn_4_fu_1668_p2;
reg   [63:0] bnn_4_reg_2763;
wire   [63:0] c0_3_fu_1703_p2;
reg   [63:0] c0_3_reg_2769;
wire    ap_CS_fsm_state30;
wire   [63:0] c1_4_fu_1715_p2;
reg   [63:0] c1_4_reg_2774;
wire   [63:0] c2_4_fu_1726_p2;
reg   [63:0] c2_4_reg_2779;
wire   [63:0] c3_4_fu_1738_p2;
reg   [63:0] c3_4_reg_2784;
wire   [63:0] c4_4_fu_1749_p2;
reg   [63:0] c4_4_reg_2789;
wire   [63:0] tmp_198_fu_1755_p3;
reg   [63:0] tmp_198_reg_2794;
wire    ap_CS_fsm_state31;
wire   [63:0] bnn_3_fu_1761_p2;
reg   [63:0] bnn_3_reg_2799;
wire   [63:0] c0_2_fu_1797_p2;
reg   [63:0] c0_2_reg_2805;
wire    ap_CS_fsm_state32;
wire   [63:0] c1_5_fu_1808_p2;
reg   [63:0] c1_5_reg_2810;
wire   [63:0] c2_3_fu_1819_p2;
reg   [63:0] c2_3_reg_2815;
wire   [63:0] c3_3_fu_1831_p2;
reg   [63:0] c3_3_reg_2820;
wire   [63:0] c4_3_fu_1842_p2;
reg   [63:0] c4_3_reg_2825;
reg   [4:0] state_address0;
reg    state_ce0;
reg    state_we0;
reg   [63:0] state_d0;
reg   [4:0] state_address1;
reg    state_ce1;
reg    state_we1;
reg   [63:0] state_d1;
reg   [4:0] invdar_reg_523;
wire   [0:0] tmp_s_fu_637_p2;
reg   [63:0] w7_write_assign_reg_534;
wire    ap_CS_fsm_state39;
reg   [63:0] w6_write_assign_reg_544;
reg   [63:0] w5_write_assign_reg_554;
reg   [63:0] w4_write_assign_reg_564;
reg   [63:0] w3_write_assign_reg_574;
reg   [63:0] tmp_129_reg_584;
reg   [63:0] tmp_130_reg_594;
reg   [63:0] w0_write_assign_reg_604;
reg   [4:0] i_reg_614;
wire   [63:0] tmp_fu_632_p1;
wire   [63:0] i_cast_fu_912_p1;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire   [63:0] tmp5_fu_669_p2;
wire   [63:0] tmp4_fu_673_p2;
wire   [63:0] tmp3_fu_665_p2;
wire   [63:0] tmp26_fu_688_p2;
wire   [63:0] tmp27_fu_692_p2;
wire   [63:0] tmp25_fu_684_p2;
wire   [63:0] tt0_4_fu_697_p2;
wire   [63:0] tmp29_fu_719_p2;
wire   [63:0] tmp30_fu_723_p2;
wire   [63:0] tmp28_fu_715_p2;
wire   [63:0] tmp36_fu_738_p2;
wire   [63:0] tmp37_fu_742_p2;
wire   [63:0] tmp35_fu_734_p2;
wire   [62:0] tmp_136_fu_753_p1;
wire   [0:0] tmp_137_fu_756_p3;
wire   [63:0] tmp10_fu_771_p2;
wire   [63:0] tt0_1_fu_763_p3;
wire   [63:0] tmp12_fu_780_p2;
wire   [63:0] tmp11_fu_785_p2;
wire   [63:0] tmp9_fu_775_p2;
wire   [63:0] tmp17_fu_800_p2;
wire   [63:0] tmp16_fu_804_p2;
wire   [63:0] tmp15_fu_796_p2;
wire   [63:0] tt0_5_fu_815_p3;
wire   [62:0] tmp_169_fu_826_p1;
wire   [0:0] tmp_172_fu_829_p3;
wire   [63:0] tmp31_fu_844_p2;
wire   [63:0] tt0_6_fu_836_p3;
wire   [63:0] tmp33_fu_853_p2;
wire   [63:0] tmp34_fu_858_p2;
wire   [63:0] tmp32_fu_848_p2;
wire   [62:0] tmp_175_fu_869_p1;
wire   [0:0] tmp_178_fu_872_p3;
wire   [63:0] tmp38_fu_887_p2;
wire   [63:0] tt0_8_fu_879_p3;
wire   [63:0] tmp40_fu_896_p2;
wire   [63:0] tmp41_fu_901_p2;
wire   [63:0] tmp39_fu_891_p2;
wire   [62:0] tmp_138_fu_917_p1;
wire   [0:0] tmp_139_fu_920_p3;
wire   [63:0] tmp22_fu_935_p2;
wire   [63:0] tt0_3_fu_927_p3;
wire   [63:0] tmp24_fu_944_p2;
wire   [63:0] tmp23_fu_949_p2;
wire   [63:0] tmp21_fu_939_p2;
wire   [63:0] tmp_133_fu_964_p2;
wire   [63:0] tmp_134_fu_968_p2;
wire   [63:0] tmp_135_fu_972_p2;
wire   [63:0] tmp_141_fu_976_p2;
wire   [63:0] tmp_147_fu_980_p2;
wire   [63:0] tmp_148_fu_984_p2;
wire   [63:0] tmp_149_fu_988_p2;
wire   [63:0] tmp_150_fu_992_p2;
wire   [63:0] tmp_151_fu_996_p2;
wire   [63:0] tmp_152_fu_1000_p2;
wire   [63:0] tmp_153_fu_1004_p2;
wire   [63:0] tmp_154_fu_1008_p2;
wire   [63:0] tmp_155_fu_1012_p2;
wire   [63:0] tmp_156_fu_1016_p2;
wire   [63:0] tmp_157_fu_1020_p2;
wire   [63:0] tmp_158_fu_1024_p2;
wire   [63:0] tmp_159_fu_1028_p2;
wire   [63:0] tmp_160_fu_1032_p2;
wire   [63:0] tmp_161_fu_1036_p2;
wire   [63:0] tmp_142_fu_1306_p2;
wire   [63:0] tmp_143_fu_1310_p2;
wire   [63:0] tmp_144_fu_1314_p2;
wire   [63:0] tmp_145_fu_1318_p2;
wire   [63:0] tmp_146_fu_1322_p2;
wire   [63:0] kt_3_fu_1424_p2;
wire   [63:0] kt_10_fu_1435_p2;
wire   [63:0] tmp_195_fu_1465_p3;
wire   [63:0] tmp_176_fu_1447_p3;
wire   [63:0] bnn_fu_1489_p2;
wire   [63:0] kt_1_fu_1501_p2;
wire   [63:0] kt_2_fu_1512_p2;
wire   [63:0] kt_4_fu_1522_p2;
wire   [63:0] tmp_201_fu_1471_p3;
wire   [63:0] tmp_183_fu_1453_p3;
wire   [63:0] kt11_fu_1538_p2;
wire   [63:0] bnn_1_fu_1532_p2;
wire   [63:0] kt12_fu_1548_p2;
wire   [63:0] kt13_fu_1559_p2;
wire   [63:0] kt_5_fu_1570_p2;
wire   [63:0] tmp_228_fu_1483_p3;
wire   [63:0] kt_7_fu_1586_p2;
wire   [63:0] kt_fu_1495_p2;
wire   [63:0] tmp42_fu_1598_p2;
wire   [63:0] kt_6_fu_1620_p2;
wire   [63:0] tmp_173_fu_1614_p3;
wire   [63:0] tmp_171_fu_1608_p3;
wire   [63:0] kt_8_fu_1630_p2;
wire   [63:0] kt_9_fu_1640_p2;
wire   [63:0] kt_14_fu_1651_p2;
wire   [63:0] tmp_225_fu_1692_p3;
wire   [63:0] tmp_189_fu_1686_p3;
wire   [63:0] kt_20_fu_1698_p2;
wire   [63:0] tmp_168_fu_1674_p3;
wire   [63:0] kt21_fu_1709_p2;
wire   [63:0] tmp_186_fu_1680_p3;
wire   [63:0] kt22_fu_1720_p2;
wire   [63:0] kt23_fu_1732_p2;
wire   [63:0] kt_24_fu_1744_p2;
wire   [63:0] tmp_180_fu_1773_p3;
wire   [63:0] tmp_163_fu_1767_p3;
wire   [63:0] tmp_219_fu_1785_p3;
wire   [63:0] kt15_fu_1791_p2;
wire   [63:0] kt16_fu_1803_p2;
wire   [63:0] tmp_216_fu_1779_p3;
wire   [63:0] kt17_fu_1814_p2;
wire   [63:0] kt_18_fu_1825_p2;
wire   [63:0] kt19_fu_1836_p2;
wire    ap_CS_fsm_state40;
wire   [63:0] w1_write_assign_fu_1848_p2;
wire   [63:0] w2_write_assign_fu_1854_p2;
wire   [0:0] tmp_131_fu_653_p2;
reg   [39:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 40'd1;
end

keccak512_64_RC #(
    .DataWidth( 64 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
RC_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(RC_address0),
    .ce0(RC_ce0),
    .q0(RC_q0)
);

keccak512_64_state #(
    .DataWidth( 64 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
state_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(state_address0),
    .ce0(state_ce0),
    .we0(state_we0),
    .d0(state_d0),
    .q0(state_q0),
    .address1(state_address1),
    .ce1(state_ce1),
    .we1(state_we1),
    .d1(state_d1),
    .q1(state_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        i_reg_614 <= i_2_reg_2115;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_614 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_637_p2 == 1'd0))) begin
        invdar_reg_523 <= indvarinc_fu_626_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        invdar_reg_523 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        tmp_129_reg_584 <= c2_reg_2687;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_129_reg_584 <= tmp_128_reg_1980;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        tmp_130_reg_594 <= c1_reg_2681;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_130_reg_594 <= tmp_127_reg_1962;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        w0_write_assign_reg_604 <= tmp_233_reg_2732;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        w0_write_assign_reg_604 <= data0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        w3_write_assign_reg_574 <= c3_reg_2652;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        w3_write_assign_reg_574 <= data3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        w4_write_assign_reg_564 <= c4_reg_2693;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        w4_write_assign_reg_564 <= data4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        w5_write_assign_reg_554 <= c0_reg_2658;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        w5_write_assign_reg_554 <= data5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        w6_write_assign_reg_544 <= c1_1_reg_2699;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        w6_write_assign_reg_544 <= data6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        w7_write_assign_reg_534 <= c2_1_reg_2705;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        w7_write_assign_reg_534 <= data7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        RC_load_reg_2664 <= RC_q0;
        c0_reg_2658 <= c0_fu_1441_p2;
        c3_reg_2652 <= c3_fu_1429_p2;
        tmp_165_reg_2572 <= tmp_165_fu_1326_p3;
        tmp_174_reg_2593 <= {{tmp_143_fu_1310_p2[63:20]}};
        tmp_177_reg_2603 <= {{tmp_144_fu_1314_p2[63:54]}};
        tmp_182_reg_2613 <= {{tmp_145_fu_1318_p2[63:19]}};
        tmp_185_reg_2623 <= {{tmp_146_fu_1322_p2[63:62]}};
        tmp_190_reg_2578 <= tmp_190_fu_1332_p1;
        tmp_193_reg_2583 <= tmp_142_fu_1306_p2[32'd63];
        tmp_196_reg_2588 <= tmp_196_fu_1344_p1;
        tmp_199_reg_2598 <= tmp_199_fu_1358_p1;
        tmp_202_reg_2608 <= tmp_202_fu_1372_p1;
        tmp_204_reg_2628 <= tmp_204_fu_1400_p3;
        tmp_205_reg_2618 <= tmp_205_fu_1386_p1;
        tmp_213_reg_2634 <= tmp_213_fu_1406_p3;
        tmp_222_reg_2640 <= tmp_222_fu_1412_p3;
        tmp_231_reg_2646 <= tmp_231_fu_1418_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        bnn_2_reg_2721 <= bnn_2_fu_1580_p2;
        c1_1_reg_2699 <= c1_1_fu_1543_p2;
        c1_2_reg_2727 <= c1_2_fu_1592_p2;
        c1_reg_2681 <= c1_fu_1506_p2;
        c2_1_reg_2705 <= c2_1_fu_1554_p2;
        c2_reg_2687 <= c2_fu_1516_p2;
        c3_1_reg_2711 <= c3_1_fu_1564_p2;
        c4_1_reg_2716 <= c4_1_fu_1574_p2;
        c4_reg_2693 <= c4_fu_1527_p2;
        tmp_192_reg_2669 <= tmp_192_fu_1459_p3;
        tmp_210_reg_2675 <= tmp_210_fu_1477_p3;
        tmp_233_reg_2732 <= tmp_233_fu_1603_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        bnn_3_reg_2799 <= bnn_3_fu_1761_p2;
        tmp_198_reg_2794 <= tmp_198_fu_1755_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        bnn_4_reg_2763 <= bnn_4_fu_1668_p2;
        tmp_207_reg_2758 <= tmp_207_fu_1662_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        c0_1_reg_2738 <= c0_1_fu_1624_p2;
        c2_2_reg_2743 <= c2_2_fu_1635_p2;
        c3_2_reg_2748 <= c3_2_fu_1646_p2;
        c4_2_reg_2753 <= c4_2_fu_1656_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        c0_2_reg_2805 <= c0_2_fu_1797_p2;
        c1_5_reg_2810 <= c1_5_fu_1808_p2;
        c2_3_reg_2815 <= c2_3_fu_1819_p2;
        c3_3_reg_2820 <= c3_3_fu_1831_p2;
        c4_3_reg_2825 <= c4_3_fu_1842_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        c0_3_reg_2769 <= c0_3_fu_1703_p2;
        c1_4_reg_2774 <= c1_4_fu_1715_p2;
        c2_4_reg_2779 <= c2_4_fu_1726_p2;
        c3_4_reg_2784 <= c3_4_fu_1738_p2;
        c4_4_reg_2789 <= c4_4_fu_1749_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_2_reg_2115 <= i_2_fu_659_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        state_load_10_reg_2255 <= state_q1;
        state_load_11_reg_2262 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        state_load_12_reg_2269 <= state_q1;
        state_load_13_reg_2276 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        state_load_14_reg_2290 <= state_q1;
        tmp_140_reg_2297 <= tmp_140_fu_703_p1;
        tmp_166_reg_2302 <= tt0_4_fu_697_p2[32'd63];
        tt0_10_reg_2283 <= tt0_10_fu_678_p2;
        tt0_7_reg_2313 <= tt0_7_fu_747_p2;
        tt0_reg_2307 <= tt0_fu_728_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_load_15_reg_2185 <= state_q1;
        state_load_16_reg_2192 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        state_load_17_reg_2199 <= state_q1;
        state_load_18_reg_2206 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        state_load_19_reg_2213 <= state_q1;
        state_load_20_reg_2220 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        state_load_1_reg_2126 <= state_q0;
        state_load_reg_2120 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        state_load_21_reg_2227 <= state_q1;
        state_load_22_reg_2234 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        state_load_23_reg_2241 <= state_q1;
        state_load_24_reg_2248 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        state_load_2_reg_2132 <= state_q1;
        state_load_3_reg_2138 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        state_load_4_reg_2144 <= state_q1;
        state_load_5_reg_2150 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        state_load_6_reg_2157 <= state_q1;
        state_load_7_reg_2164 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_load_8_reg_2171 <= state_q1;
        state_load_9_reg_2178 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        t0_reg_2319 <= t0_fu_790_p2;
        t2_reg_2334 <= t2_fu_821_p2;
        t3_reg_2343 <= t3_fu_863_p2;
        t4_reg_2352 <= t4_fu_906_p2;
        tt0_2_reg_2328 <= tt0_2_fu_809_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        t1_reg_2361 <= t1_fu_954_p2;
        tmp_132_reg_2370 <= tmp_132_fu_960_p2;
        tmp_162_reg_2382 <= {{tmp_133_fu_964_p2[63:28]}};
        tmp_164_reg_2392 <= {{tmp_134_fu_968_p2[63:61]}};
        tmp_167_reg_2402 <= {{tmp_135_fu_972_p2[63:23]}};
        tmp_170_reg_2412 <= {{tmp_141_fu_976_p2[63:46]}};
        tmp_179_reg_2377 <= tmp_179_fu_1040_p1;
        tmp_181_reg_2387 <= tmp_181_fu_1054_p1;
        tmp_184_reg_2397 <= tmp_184_fu_1068_p1;
        tmp_187_reg_2407 <= tmp_187_fu_1082_p1;
        tmp_188_reg_2422 <= {{tmp_147_fu_980_p2[63:2]}};
        tmp_191_reg_2432 <= {{tmp_148_fu_984_p2[63:58]}};
        tmp_194_reg_2442 <= {{tmp_149_fu_988_p2[63:21]}};
        tmp_197_reg_2452 <= {{tmp_150_fu_992_p2[63:49]}};
        tmp_200_reg_2462 <= {{tmp_151_fu_996_p2[63:3]}};
        tmp_203_reg_2472 <= {{tmp_152_fu_1000_p2[63:36]}};
        tmp_206_reg_2482 <= {{tmp_153_fu_1004_p2[63:9]}};
        tmp_208_reg_2417 <= tmp_208_fu_1096_p1;
        tmp_209_reg_2492 <= {{tmp_154_fu_1008_p2[63:39]}};
        tmp_211_reg_2427 <= tmp_211_fu_1110_p1;
        tmp_212_reg_2502 <= {{tmp_155_fu_1012_p2[63:43]}};
        tmp_214_reg_2437 <= tmp_214_fu_1124_p1;
        tmp_215_reg_2512 <= {{tmp_156_fu_1016_p2[63:8]}};
        tmp_217_reg_2447 <= tmp_217_fu_1138_p1;
        tmp_218_reg_2522 <= {{tmp_157_fu_1020_p2[63:37]}};
        tmp_220_reg_2457 <= tmp_220_fu_1152_p1;
        tmp_221_reg_2532 <= {{tmp_158_fu_1024_p2[63:44]}};
        tmp_223_reg_2467 <= tmp_223_fu_1166_p1;
        tmp_224_reg_2542 <= {{tmp_159_fu_1028_p2[63:25]}};
        tmp_226_reg_2477 <= tmp_226_fu_1180_p1;
        tmp_227_reg_2552 <= {{tmp_160_fu_1032_p2[63:56]}};
        tmp_229_reg_2487 <= tmp_229_fu_1194_p1;
        tmp_230_reg_2562 <= {{tmp_161_fu_1036_p2[63:50]}};
        tmp_232_reg_2497 <= tmp_232_fu_1208_p1;
        tmp_235_reg_2507 <= tmp_235_fu_1222_p1;
        tmp_239_reg_2517 <= tmp_239_fu_1236_p1;
        tmp_240_reg_2527 <= tmp_240_fu_1250_p1;
        tmp_241_reg_2537 <= tmp_241_fu_1264_p1;
        tmp_242_reg_2547 <= tmp_242_fu_1278_p1;
        tmp_243_reg_2557 <= tmp_243_fu_1292_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_127_reg_1962 <= tmp_127_fu_643_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_128_reg_1980 <= tmp_128_fu_648_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        RC_ce0 = 1'b1;
    end else begin
        RC_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state40))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        state_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        state_address0 = state_addr_10_reg_2024;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        state_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        state_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        state_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        state_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        state_address0 = state_addr_1_reg_1968;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state37))) begin
        state_address0 = 64'd17;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state29))) begin
        state_address0 = state_addr_8_reg_2014;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        state_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        state_address0 = state_addr_4_reg_1991;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state34))) begin
        state_address0 = 64'd15;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state27))) begin
        state_address0 = state_addr_6_reg_2003;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state35))) begin
        state_address0 = 64'd24;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state32))) begin
        state_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = tmp_fu_632_p1;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        state_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        state_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        state_address1 = state_addr_5_reg_1997;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        state_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        state_address1 = state_addr_7_reg_2008;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        state_address1 = 64'd3;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state31))) begin
        state_address1 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        state_address1 = 64'd12;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state32))) begin
        state_address1 = state_addr_3_reg_1986;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        state_address1 = 64'd18;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state35))) begin
        state_address1 = state_addr_9_reg_2019;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state37))) begin
        state_address1 = 64'd20;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state29))) begin
        state_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address1 = 64'd21;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state28))) begin
        state_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address1 = state_addr_2_reg_1974;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address1 = 64'd1;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        state_d0 = c1_4_reg_2774;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        state_d0 = c2_2_reg_2743;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        state_d0 = c2_3_reg_2815;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        state_d0 = c3_3_reg_2820;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        state_d0 = c4_4_reg_2789;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        state_d0 = c0_2_reg_2805;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        state_d0 = c4_3_reg_2825;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        state_d0 = c4_2_reg_2753;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        state_d0 = c4_1_reg_2716;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        state_d0 = c1_reg_2681;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        state_d0 = c2_1_reg_2705;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        state_d0 = tmp_233_reg_2732;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        state_d0 = c0_reg_2658;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        state_d0 = 64'd18446744073709551615;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_d0 = data7;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_d0 = data5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_d0 = data3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_d0 = data0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_d0 = 64'd0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        state_d1 = c3_2_reg_2748;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        state_d1 = c0_3_reg_2769;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        state_d1 = c1_5_reg_2810;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        state_d1 = c3_1_reg_2711;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        state_d1 = c4_reg_2693;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        state_d1 = c3_4_reg_2784;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        state_d1 = c2_reg_2687;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        state_d1 = c2_4_reg_2779;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        state_d1 = c1_1_reg_2699;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        state_d1 = c0_1_reg_2738;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        state_d1 = c1_2_reg_2727;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        state_d1 = c3_reg_2652;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_d1 = 64'd18446744073709551615;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_d1 = 64'd9223372036854775806;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_d1 = data6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_d1 = data4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_d1 = tmp_128_reg_1980;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_d1 = tmp_127_reg_1962;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_637_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == tmp_131_fu_653_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign RC_address0 = i_cast_fu_912_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return_0 = w0_write_assign_reg_604;

assign ap_return_1 = w1_write_assign_fu_1848_p2;

assign ap_return_2 = w2_write_assign_fu_1854_p2;

assign ap_return_3 = w3_write_assign_reg_574;

assign ap_return_4 = w4_write_assign_reg_564;

assign ap_return_5 = w5_write_assign_reg_554;

assign ap_return_6 = w6_write_assign_reg_544;

assign ap_return_7 = w7_write_assign_reg_534;

assign bnn_1_fu_1532_p2 = (tmp_201_fu_1471_p3 ^ 64'd18446744073709551615);

assign bnn_2_fu_1580_p2 = (tmp_228_fu_1483_p3 ^ 64'd18446744073709551615);

assign bnn_3_fu_1761_p2 = (tmp_198_fu_1755_p3 ^ 64'd18446744073709551615);

assign bnn_4_fu_1668_p2 = (tmp_207_fu_1662_p3 ^ 64'd18446744073709551615);

assign bnn_fu_1489_p2 = (tmp_195_fu_1465_p3 ^ 64'd18446744073709551615);

assign c0_1_fu_1624_p2 = (kt_6_fu_1620_p2 ^ tmp_173_fu_1614_p3);

assign c0_2_fu_1797_p2 = (tmp_219_fu_1785_p3 ^ kt15_fu_1791_p2);

assign c0_3_fu_1703_p2 = (tmp_189_fu_1686_p3 ^ kt_20_fu_1698_p2);

assign c0_fu_1441_p2 = (kt_10_fu_1435_p2 ^ tmp_204_fu_1400_p3);

assign c1_1_fu_1543_p2 = (tmp_222_reg_2640 ^ kt11_fu_1538_p2);

assign c1_2_fu_1592_p2 = (tmp_192_fu_1459_p3 ^ kt_7_fu_1586_p2);

assign c1_4_fu_1715_p2 = (kt21_fu_1709_p2 ^ bnn_4_reg_2763);

assign c1_5_fu_1808_p2 = (kt16_fu_1803_p2 ^ tmp_163_fu_1767_p3);

assign c1_fu_1506_p2 = (kt_1_fu_1501_p2 ^ tmp_176_fu_1447_p3);

assign c2_1_fu_1554_p2 = (kt12_fu_1548_p2 ^ tmp_165_reg_2572);

assign c2_2_fu_1635_p2 = (kt_8_fu_1630_p2 ^ tmp_210_reg_2675);

assign c2_3_fu_1819_p2 = (kt17_fu_1814_p2 ^ tmp_180_fu_1773_p3);

assign c2_4_fu_1726_p2 = (tmp_225_fu_1692_p3 ^ kt22_fu_1720_p2);

assign c2_fu_1516_p2 = (tmp_195_fu_1465_p3 ^ kt_2_fu_1512_p2);

assign c3_1_fu_1564_p2 = (kt13_fu_1559_p2 ^ tmp_183_fu_1453_p3);

assign c3_2_fu_1646_p2 = (kt_9_fu_1640_p2 ^ bnn_2_reg_2721);

assign c3_3_fu_1831_p2 = (kt_18_fu_1825_p2 ^ bnn_3_reg_2799);

assign c3_4_fu_1738_p2 = (kt23_fu_1732_p2 ^ tmp_168_fu_1674_p3);

assign c3_fu_1429_p2 = (kt_3_fu_1424_p2 ^ tmp_213_fu_1406_p3);

assign c4_1_fu_1574_p2 = (tmp_201_fu_1471_p3 ^ kt_5_fu_1570_p2);

assign c4_2_fu_1656_p2 = (kt_14_fu_1651_p2 ^ tmp_171_fu_1608_p3);

assign c4_3_fu_1842_p2 = (kt19_fu_1836_p2 ^ tmp_216_fu_1779_p3);

assign c4_4_fu_1749_p2 = (kt_24_fu_1744_p2 ^ tmp_186_fu_1680_p3);

assign c4_fu_1527_p2 = (tmp_231_reg_2646 ^ kt_4_fu_1522_p2);

assign i_2_fu_659_p2 = (i_reg_614 + 5'd1);

assign i_cast_fu_912_p1 = i_reg_614;

assign indvarinc_fu_626_p2 = (invdar_reg_523 + 5'd1);

assign kt11_fu_1538_p2 = (tmp_183_fu_1453_p3 & tmp_165_reg_2572);

assign kt12_fu_1548_p2 = (tmp_183_fu_1453_p3 | bnn_1_fu_1532_p2);

assign kt13_fu_1559_p2 = (tmp_201_fu_1471_p3 | tmp_204_reg_2628);

assign kt15_fu_1791_p2 = (tmp_180_fu_1773_p3 & tmp_163_fu_1767_p3);

assign kt16_fu_1803_p2 = (tmp_198_reg_2794 | tmp_180_fu_1773_p3);

assign kt17_fu_1814_p2 = (tmp_216_fu_1779_p3 | bnn_3_reg_2799);

assign kt19_fu_1836_p2 = (tmp_219_fu_1785_p3 | tmp_163_fu_1767_p3);

assign kt21_fu_1709_p2 = (tmp_225_fu_1692_p3 | tmp_168_fu_1674_p3);

assign kt22_fu_1720_p2 = (tmp_186_fu_1680_p3 & tmp_168_fu_1674_p3);

assign kt23_fu_1732_p2 = (tmp_189_fu_1686_p3 | tmp_186_fu_1680_p3);

assign kt_10_fu_1435_p2 = (tmp_222_fu_1412_p3 | tmp_165_fu_1326_p3);

assign kt_14_fu_1651_p2 = (tmp_192_reg_2669 & tmp_173_fu_1614_p3);

assign kt_18_fu_1825_p2 = (tmp_219_fu_1785_p3 & tmp_216_fu_1779_p3);

assign kt_1_fu_1501_p2 = (tmp_213_reg_2634 | bnn_fu_1489_p2);

assign kt_20_fu_1698_p2 = (tmp_225_fu_1692_p3 & bnn_4_reg_2763);

assign kt_24_fu_1744_p2 = (tmp_189_fu_1686_p3 & tmp_207_reg_2758);

assign kt_2_fu_1512_p2 = (tmp_231_reg_2646 & tmp_213_reg_2634);

assign kt_3_fu_1424_p2 = (tmp_231_fu_1418_p3 | tmp_132_reg_2370);

assign kt_4_fu_1522_p2 = (tmp_176_fu_1447_p3 & tmp_132_reg_2370);

assign kt_5_fu_1570_p2 = (tmp_222_reg_2640 & tmp_204_reg_2628);

assign kt_6_fu_1620_p2 = (tmp_192_reg_2669 | tmp_210_reg_2675);

assign kt_7_fu_1586_p2 = (tmp_228_fu_1483_p3 & tmp_210_fu_1477_p3);

assign kt_8_fu_1630_p2 = (tmp_171_fu_1608_p3 & bnn_2_reg_2721);

assign kt_9_fu_1640_p2 = (tmp_173_fu_1614_p3 | tmp_171_fu_1608_p3);

assign kt_fu_1495_p2 = (tmp_195_fu_1465_p3 | tmp_176_fu_1447_p3);

assign state_addr_10_reg_2024 = 64'd12;

assign state_addr_1_reg_1968 = 64'd0;

assign state_addr_2_reg_1974 = 64'd1;

assign state_addr_3_reg_1986 = 64'd2;

assign state_addr_4_reg_1991 = 64'd3;

assign state_addr_5_reg_1997 = 64'd4;

assign state_addr_6_reg_2003 = 64'd5;

assign state_addr_7_reg_2008 = 64'd6;

assign state_addr_8_reg_2014 = 64'd7;

assign state_addr_9_reg_2019 = 64'd8;

assign t0_fu_790_p2 = (tmp11_fu_785_p2 ^ tmp9_fu_775_p2);

assign t1_fu_954_p2 = (tmp23_fu_949_p2 ^ tmp21_fu_939_p2);

assign t2_fu_821_p2 = (tt0_10_reg_2283 ^ tt0_5_fu_815_p3);

assign t3_fu_863_p2 = (tmp34_fu_858_p2 ^ tmp32_fu_848_p2);

assign t4_fu_906_p2 = (tmp41_fu_901_p2 ^ tmp39_fu_891_p2);

assign tmp10_fu_771_p2 = (state_load_7_reg_2164 ^ state_load_6_reg_2157);

assign tmp11_fu_785_p2 = (tmp12_fu_780_p2 ^ state_load_5_reg_2150);

assign tmp12_fu_780_p2 = (state_load_9_reg_2178 ^ tt0_1_fu_763_p3);

assign tmp15_fu_796_p2 = (state_load_12_reg_2269 ^ state_load_13_reg_2276);

assign tmp16_fu_804_p2 = (tmp17_fu_800_p2 ^ state_load_10_reg_2255);

assign tmp17_fu_800_p2 = (state_load_11_reg_2262 ^ state_load_14_reg_2290);

assign tmp21_fu_939_p2 = (tmp22_fu_935_p2 ^ state_load_18_reg_2206);

assign tmp22_fu_935_p2 = (state_load_17_reg_2199 ^ state_load_16_reg_2192);

assign tmp23_fu_949_p2 = (tmp24_fu_944_p2 ^ state_load_15_reg_2185);

assign tmp24_fu_944_p2 = (state_load_19_reg_2213 ^ tt0_3_fu_927_p3);

assign tmp25_fu_684_p2 = (state_load_22_reg_2234 ^ state_load_23_reg_2241);

assign tmp26_fu_688_p2 = (state_load_21_reg_2227 ^ state_load_24_reg_2248);

assign tmp27_fu_692_p2 = (tmp26_fu_688_p2 ^ state_load_20_reg_2220);

assign tmp28_fu_715_p2 = (state_load_7_reg_2164 ^ state_load_8_reg_2171);

assign tmp29_fu_719_p2 = (state_load_6_reg_2157 ^ state_load_9_reg_2178);

assign tmp30_fu_723_p2 = (tmp29_fu_719_p2 ^ state_load_5_reg_2150);

assign tmp31_fu_844_p2 = (state_load_12_reg_2269 ^ state_load_11_reg_2262);

assign tmp32_fu_848_p2 = (tmp31_fu_844_p2 ^ state_load_13_reg_2276);

assign tmp33_fu_853_p2 = (state_load_14_reg_2290 ^ tt0_6_fu_836_p3);

assign tmp34_fu_858_p2 = (tmp33_fu_853_p2 ^ state_load_10_reg_2255);

assign tmp35_fu_734_p2 = (state_load_17_reg_2199 ^ state_load_18_reg_2206);

assign tmp36_fu_738_p2 = (state_load_16_reg_2192 ^ state_load_19_reg_2213);

assign tmp37_fu_742_p2 = (tmp36_fu_738_p2 ^ state_load_15_reg_2185);

assign tmp38_fu_887_p2 = (state_load_22_reg_2234 ^ state_load_21_reg_2227);

assign tmp39_fu_891_p2 = (tmp38_fu_887_p2 ^ state_load_23_reg_2241);

assign tmp3_fu_665_p2 = (state_load_2_reg_2132 ^ state_load_3_reg_2138);

assign tmp40_fu_896_p2 = (state_load_24_reg_2248 ^ tt0_8_fu_879_p3);

assign tmp41_fu_901_p2 = (tmp40_fu_896_p2 ^ state_load_20_reg_2220);

assign tmp42_fu_1598_p2 = (kt_fu_1495_p2 ^ tmp_132_reg_2370);

assign tmp4_fu_673_p2 = (tmp5_fu_669_p2 ^ state_load_reg_2120);

assign tmp5_fu_669_p2 = (state_load_1_reg_2126 ^ state_load_4_reg_2144);

assign tmp9_fu_775_p2 = (tmp10_fu_771_p2 ^ state_load_8_reg_2171);

assign tmp_127_fu_643_p2 = (data1 ^ 64'd18446744073709551615);

assign tmp_128_fu_648_p2 = (data2 ^ 64'd18446744073709551615);

assign tmp_131_fu_653_p2 = ((i_reg_614 == 5'd24) ? 1'b1 : 1'b0);

assign tmp_132_fu_960_p2 = (state_load_15_reg_2185 ^ t0_reg_2319);

assign tmp_133_fu_964_p2 = (state_load_16_reg_2192 ^ t0_reg_2319);

assign tmp_134_fu_968_p2 = (state_load_17_reg_2199 ^ t0_reg_2319);

assign tmp_135_fu_972_p2 = (state_load_18_reg_2206 ^ t0_reg_2319);

assign tmp_136_fu_753_p1 = tt0_10_reg_2283[62:0];

assign tmp_137_fu_756_p3 = tt0_10_reg_2283[32'd63];

assign tmp_138_fu_917_p1 = tt0_2_reg_2328[62:0];

assign tmp_139_fu_920_p3 = tt0_2_reg_2328[32'd63];

assign tmp_140_fu_703_p1 = tt0_4_fu_697_p2[62:0];

assign tmp_141_fu_976_p2 = (state_load_19_reg_2213 ^ t0_reg_2319);

assign tmp_142_fu_1306_p2 = (state_load_reg_2120 ^ t1_reg_2361);

assign tmp_143_fu_1310_p2 = (state_load_1_reg_2126 ^ t1_reg_2361);

assign tmp_144_fu_1314_p2 = (state_load_2_reg_2132 ^ t1_reg_2361);

assign tmp_145_fu_1318_p2 = (state_load_3_reg_2138 ^ t1_reg_2361);

assign tmp_146_fu_1322_p2 = (state_load_4_reg_2144 ^ t1_reg_2361);

assign tmp_147_fu_980_p2 = (state_load_10_reg_2255 ^ t2_reg_2334);

assign tmp_148_fu_984_p2 = (state_load_11_reg_2262 ^ t2_reg_2334);

assign tmp_149_fu_988_p2 = (state_load_12_reg_2269 ^ t2_reg_2334);

assign tmp_150_fu_992_p2 = (state_load_13_reg_2276 ^ t2_reg_2334);

assign tmp_151_fu_996_p2 = (state_load_14_reg_2290 ^ t2_reg_2334);

assign tmp_152_fu_1000_p2 = (state_load_20_reg_2220 ^ t3_reg_2343);

assign tmp_153_fu_1004_p2 = (state_load_21_reg_2227 ^ t3_reg_2343);

assign tmp_154_fu_1008_p2 = (state_load_22_reg_2234 ^ t3_reg_2343);

assign tmp_155_fu_1012_p2 = (state_load_23_reg_2241 ^ t3_reg_2343);

assign tmp_156_fu_1016_p2 = (state_load_24_reg_2248 ^ t3_reg_2343);

assign tmp_157_fu_1020_p2 = (state_load_5_reg_2150 ^ t4_reg_2352);

assign tmp_158_fu_1024_p2 = (state_load_6_reg_2157 ^ t4_reg_2352);

assign tmp_159_fu_1028_p2 = (state_load_7_reg_2164 ^ t4_reg_2352);

assign tmp_160_fu_1032_p2 = (state_load_8_reg_2171 ^ t4_reg_2352);

assign tmp_161_fu_1036_p2 = (state_load_9_reg_2178 ^ t4_reg_2352);

assign tmp_163_fu_1767_p3 = {{tmp_179_reg_2377}, {tmp_162_reg_2382}};

assign tmp_165_fu_1326_p3 = {{tmp_181_reg_2387}, {tmp_164_reg_2392}};

assign tmp_168_fu_1674_p3 = {{tmp_184_reg_2397}, {tmp_167_reg_2402}};

assign tmp_169_fu_826_p1 = tt0_reg_2307[62:0];

assign tmp_171_fu_1608_p3 = {{tmp_187_reg_2407}, {tmp_170_reg_2412}};

assign tmp_172_fu_829_p3 = tt0_reg_2307[32'd63];

assign tmp_173_fu_1614_p3 = {{tmp_190_reg_2578}, {tmp_193_reg_2583}};

assign tmp_175_fu_869_p1 = tt0_7_reg_2313[62:0];

assign tmp_176_fu_1447_p3 = {{tmp_196_reg_2588}, {tmp_174_reg_2593}};

assign tmp_178_fu_872_p3 = tt0_7_reg_2313[32'd63];

assign tmp_179_fu_1040_p1 = tmp_133_fu_964_p2[27:0];

assign tmp_180_fu_1773_p3 = {{tmp_199_reg_2598}, {tmp_177_reg_2603}};

assign tmp_181_fu_1054_p1 = tmp_134_fu_968_p2[60:0];

assign tmp_183_fu_1453_p3 = {{tmp_202_reg_2608}, {tmp_182_reg_2613}};

assign tmp_184_fu_1068_p1 = tmp_135_fu_972_p2[22:0];

assign tmp_186_fu_1680_p3 = {{tmp_205_reg_2618}, {tmp_185_reg_2623}};

assign tmp_187_fu_1082_p1 = tmp_141_fu_976_p2[45:0];

assign tmp_189_fu_1686_p3 = {{tmp_208_reg_2417}, {tmp_188_reg_2422}};

assign tmp_190_fu_1332_p1 = tmp_142_fu_1306_p2[62:0];

assign tmp_192_fu_1459_p3 = {{tmp_211_reg_2427}, {tmp_191_reg_2432}};

assign tmp_195_fu_1465_p3 = {{tmp_214_reg_2437}, {tmp_194_reg_2442}};

assign tmp_196_fu_1344_p1 = tmp_143_fu_1310_p2[19:0];

assign tmp_198_fu_1755_p3 = {{tmp_217_reg_2447}, {tmp_197_reg_2452}};

assign tmp_199_fu_1358_p1 = tmp_144_fu_1314_p2[53:0];

assign tmp_201_fu_1471_p3 = {{tmp_220_reg_2457}, {tmp_200_reg_2462}};

assign tmp_202_fu_1372_p1 = tmp_145_fu_1318_p2[18:0];

assign tmp_204_fu_1400_p3 = {{tmp_223_reg_2467}, {tmp_203_reg_2472}};

assign tmp_205_fu_1386_p1 = tmp_146_fu_1322_p2[61:0];

assign tmp_207_fu_1662_p3 = {{tmp_226_reg_2477}, {tmp_206_reg_2482}};

assign tmp_208_fu_1096_p1 = tmp_147_fu_980_p2[1:0];

assign tmp_210_fu_1477_p3 = {{tmp_229_reg_2487}, {tmp_209_reg_2492}};

assign tmp_211_fu_1110_p1 = tmp_148_fu_984_p2[57:0];

assign tmp_213_fu_1406_p3 = {{tmp_232_reg_2497}, {tmp_212_reg_2502}};

assign tmp_214_fu_1124_p1 = tmp_149_fu_988_p2[20:0];

assign tmp_216_fu_1779_p3 = {{tmp_235_reg_2507}, {tmp_215_reg_2512}};

assign tmp_217_fu_1138_p1 = tmp_150_fu_992_p2[48:0];

assign tmp_219_fu_1785_p3 = {{tmp_239_reg_2517}, {tmp_218_reg_2522}};

assign tmp_220_fu_1152_p1 = tmp_151_fu_996_p2[2:0];

assign tmp_222_fu_1412_p3 = {{tmp_240_reg_2527}, {tmp_221_reg_2532}};

assign tmp_223_fu_1166_p1 = tmp_152_fu_1000_p2[35:0];

assign tmp_225_fu_1692_p3 = {{tmp_241_reg_2537}, {tmp_224_reg_2542}};

assign tmp_226_fu_1180_p1 = tmp_153_fu_1004_p2[8:0];

assign tmp_228_fu_1483_p3 = {{tmp_242_reg_2547}, {tmp_227_reg_2552}};

assign tmp_229_fu_1194_p1 = tmp_154_fu_1008_p2[38:0];

assign tmp_231_fu_1418_p3 = {{tmp_243_reg_2557}, {tmp_230_reg_2562}};

assign tmp_232_fu_1208_p1 = tmp_155_fu_1012_p2[42:0];

assign tmp_233_fu_1603_p2 = (tmp42_fu_1598_p2 ^ RC_load_reg_2664);

assign tmp_235_fu_1222_p1 = tmp_156_fu_1016_p2[7:0];

assign tmp_239_fu_1236_p1 = tmp_157_fu_1020_p2[36:0];

assign tmp_240_fu_1250_p1 = tmp_158_fu_1024_p2[43:0];

assign tmp_241_fu_1264_p1 = tmp_159_fu_1028_p2[24:0];

assign tmp_242_fu_1278_p1 = tmp_160_fu_1032_p2[55:0];

assign tmp_243_fu_1292_p1 = tmp_161_fu_1036_p2[49:0];

assign tmp_fu_632_p1 = invdar_reg_523;

assign tmp_s_fu_637_p2 = ((invdar_reg_523 == 5'd24) ? 1'b1 : 1'b0);

assign tt0_10_fu_678_p2 = (tmp4_fu_673_p2 ^ tmp3_fu_665_p2);

assign tt0_1_fu_763_p3 = {{tmp_136_fu_753_p1}, {tmp_137_fu_756_p3}};

assign tt0_2_fu_809_p2 = (tmp16_fu_804_p2 ^ tmp15_fu_796_p2);

assign tt0_3_fu_927_p3 = {{tmp_138_fu_917_p1}, {tmp_139_fu_920_p3}};

assign tt0_4_fu_697_p2 = (tmp27_fu_692_p2 ^ tmp25_fu_684_p2);

assign tt0_5_fu_815_p3 = {{tmp_140_reg_2297}, {tmp_166_reg_2302}};

assign tt0_6_fu_836_p3 = {{tmp_169_fu_826_p1}, {tmp_172_fu_829_p3}};

assign tt0_7_fu_747_p2 = (tmp37_fu_742_p2 ^ tmp35_fu_734_p2);

assign tt0_8_fu_879_p3 = {{tmp_175_fu_869_p1}, {tmp_178_fu_872_p3}};

assign tt0_fu_728_p2 = (tmp30_fu_723_p2 ^ tmp28_fu_715_p2);

assign w1_write_assign_fu_1848_p2 = (tmp_130_reg_594 ^ 64'd18446744073709551615);

assign w2_write_assign_fu_1854_p2 = (tmp_129_reg_584 ^ 64'd18446744073709551615);

endmodule //keccak512_64
